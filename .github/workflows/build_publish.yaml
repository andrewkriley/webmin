# This workflow is named "Webmin Docker CI" for clarity.
name: Webmin Docker Image CI Build

# This section specifies the events that trigger the workflow.
on:
  push:
    paths:
      - 'Dockerfile'

# The `jobs` section contains one or more jobs.
# This workflow has a single job called `build-and-push-image`.
jobs:
  build-and-push-image:
    # Specifies the type of runner the job will be executed on.
    runs-on: ubuntu-latest

    # The `steps` section defines the sequence of tasks for the job.
    steps:
      # Step 1: Checkout the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up QEMU for multi-architecture builds.
      # This allows the Linux runner to emulate other architectures.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up the Docker Buildx builder.
      # This is required to build images for multiple platforms.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Log in to Docker Hub.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Build and push the multi-platform Docker image.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/webmin:latest
          # The `platforms` input specifies the target architectures.
          # linux/amd64: Standard Linux architecture, covers Linux and most macOS (Intel).
          # linux/arm64: Covers modern macOS (Apple Silicon) and other ARM-based devices.
          # windows/amd64: Standard Windows architecture. (not supported with an Ubuntu base for the build)
          # building multipl platform takes a long time as it uses QEMU emulation
          platforms: linux/amd64